Using ODBC (Open Database Connectivity) for Database Operations
ODBC allows applications to interact with databases like Oracle, MySQL, SQL Server, etc., using a standardized API. Below, I'll show how to connect to a database and perform basic operations using ODBC in Python.

By using PYTHON
Download Python 
	Go to the official Python website: https://www.python.org/downloads/
	Click the "Download Python" button (this will download the latest version)
Install Required Packages
First, install the pyodbc library (for Python):
To install above
1.	Win + X, then click Windows Terminal (cmd)
2.	pip install pyodbc
3.	python
4.	>>>>import pyodbc ( if there is no error, then it is  done)


ODBC Connection Setup
To use ODBC, configure a DSN (Data Source Name) in your system:
	Windows: Go to Control panel → Windows tools (older versions of windows ADMINISTRATIVE TOOL)→  ODBC Data Sources (64-bit) → Add → Oracle in OraDb11g_home → 
1.	Data source name : orcl.
2.	Description: 
3.	Tns service name: 
4.	User ID : scott
→ click OK ( it will ask password : tiger, connection successful)


 
Python Code for ODBC Database Operations
The following Python program connects to a database via ODBC and performs CRUD (Create, Read, Update, Delete) operations.
	Python Script Using ODBC
import pyodbc  # Import the pyodbc library

# 1. Establish a connection to the database using ODBC.
#    You'll need to replace the connection string with your actual database details.
#    The driver might vary based on your database (e.g., 'SQL Server', 'Oracle', 'PostgreSQL').
#    Ensure you have the appropriate ODBC driver installed.
connection_string = (
    "DRIVER={Oracle in OraClient19home1};"  # Example for Oracle.  Change this!
    "UID=your_username;"  # Replace with your username
    "PWD=your_password;"  # Replace with your password
    "DBQ=your_database_name;"  # Replace with your database name (e.g., SID for Oracle, DSN for SQL Server)
    "SERVER=your_server_address:1521/orcl;" #Replace with your server details
)

try:
    conn = pyodbc.connect(connection_string)
    print("Connection successful!")
except pyodbc.Error as ex:
    sqlstate = ex.args[0]
    if sqlstate == 'IM002':
        print("Error: [IM002] Data source name not found and no default driver specified.  "
              "Please check your connection string and ensure the ODBC driver is correctly installed and configured.")
    else:
        print(f"Error: {ex}")
    exit()

# 2. Create a cursor object.  The cursor is used to execute SQL queries.
cursor = conn.cursor()

# 3. Perform database operations using the cursor.

# a) Create a table (if it doesn't exist).
try:
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS accounts (
            account_id VARCHAR2(20) PRIMARY KEY,
            balance NUMBER
        )
    """)
    conn.commit()  # Commit the changes.
    print("Table 'accounts' created (if it didn't exist).")
except pyodbc.Error as ex:
    print(f"Error creating table: {ex}")
    conn.rollback()

# b) Insert data into the table.
try:
    cursor.execute("INSERT INTO accounts (account_id, balance) VALUES ('1001', 1000)")
    cursor.execute("INSERT INTO accounts (account_id, balance) VALUES ('1002', 500)")
    conn.commit()
    print("Data inserted into 'accounts'.")
except pyodbc.Error as ex:
    print(f"Error inserting data: {ex}")
    conn.rollback()

# c) Select data from the table.
try:
    cursor.execute("SELECT * FROM accounts")
    rows = cursor.fetchall()  # Fetch all rows from the result set.
    print("Data from 'accounts':")
    for row in rows:
        print(f"Account ID: {row.account_id}, Balance: {row.balance}")
except pyodbc.Error as ex:
    print(f"Error selecting data: {ex}")

# d) Update data in the table.
try:
    cursor.execute("UPDATE accounts SET balance = 1200 WHERE account_id = '1001'")
    conn.commit()
    print("Data updated in 'accounts'.")
except pyodbc.Error as ex:
    print(f"Error updating data: {ex}")
    conn.rollback()

# e) Select data after update
try:
    cursor.execute("SELECT * FROM accounts")
    rows = cursor.fetchall()  # Fetch all rows from the result set.
    print("Data from 'accounts' after update:")
    for row in rows:
        print(f"Account ID: {row.account_id}, Balance: {row.balance}")
except pyodbc.Error as ex:
    print(f"Error selecting data: {ex}")

# f) Delete data from the table.
try:
    cursor.execute("DELETE FROM accounts WHERE account_id = '1002'")
    conn.commit()
    print("Data deleted from 'accounts'.")
except pyodbc.Error as ex:
    print(f"Error deleting data: {ex}")
    conn.rollback()

# g) Select data after deletion
try:
    cursor.execute("SELECT * FROM accounts")
    rows = cursor.fetchall()  # Fetch all rows from the result set.
    print("Data from 'accounts' after deletion:")
    for row in rows:
        print(f"Account ID: {row.account_id}, Balance: {row.balance}")
except pyodbc.Error as ex:
    print(f"Error selecting data: {ex}")

#h) Call Procedure
try:
  cursor.execute("DROP PROCEDURE IF EXISTS test_proc")
  conn.commit()
  cursor.execute(
      """
      CREATE OR REPLACE PROCEDURE test_proc (acc_id IN VARCHAR2, bal OUT NUMBER)
      AS
      BEGIN
        SELECT balance into bal from ACCOUNTS where account_id = acc_id;
      END;
      """
  )
  conn.commit()
  account_id_to_check = '1001'
  cursor.callproc("test_proc", [account_id_to_check, None])
  result_balance = cursor.fetchone()[1]
  print(f"Balance of account {account_id_to_check} is {result_balance}")
except pyodbc.Error as ex:
  print(f"Error calling procedure: {ex}")

# 4. Close the cursor and the connection when you're done.  This is important to free up resources.
cursor.close()
conn.close()
print("Connection closed.")
